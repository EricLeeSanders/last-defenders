apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'

def keystorePropertiesFile = rootProject.file("android/src/com/lastdefenders/config/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def adMobPropertiesFile = rootProject.file("android/src/com/lastdefenders/config/AdMob.properties")
def adMobProperties = new Properties()
adMobProperties.load(new FileInputStream(adMobPropertiesFile))

android {
    namespace 'com.lastdefenders.game'
    compileSdk = 34

    defaultConfig {
        applicationId "com.lastdefenders.game"
        minSdkVersion 33
        targetSdkVersion 34
        versionCode project.version.replace(".", "") as int
        versionName project.version
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            resValue "string", "ADMOB_APP_ID", '"ca-app-pub-3940256099942544~3347511713"'
            buildConfigField "String", "ADMOB_APP_ID", '"ca-app-pub-3940256099942544~3347511713"'
            buildConfigField "String", "ADMOB_AD_UNIT_ID", '"ca-app-pub-3940256099942544/1033173712"'
            project.rootProject.ext.debugBuild = "true"
            debuggable = false // False for games upload requirement
        }
        release {
            signingConfig signingConfigs.release
            resValue "string", "ADMOB_APP_ID", adMobProperties['app_id']
            buildConfigField "String", "ADMOB_APP_ID", adMobProperties['app_id']
            buildConfigField "String", "ADMOB_AD_UNIT_ID", adMobProperties['ad_unit_id']
            minifyEnabled false
            shrinkResources false
            debuggable false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        buildConfig true
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }
}

task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

/*
This is for signing my bundles when I create them from CLI.
./gradlew :android:bundleDebug -PisDebug=true
./gradlew :android:signBundle
 */
task signBundle(type: Exec) {
    doFirst {
        def keystoreProps = new Properties()
        def propsFile = rootProject.file("android/src/com/lastdefenders/config/keystore.properties")
        if (!propsFile.exists()) {
            throw new GradleException("Keystore properties file not found: ${propsFile}")
        }
        propsFile.withInputStream { keystoreProps.load(it) }

        def keyAlias = keystoreProps['keyAlias']
        def keyPassword = keystoreProps['keyPassword']
        def storePassword = keystoreProps['storePassword']
        def storeFile = keystoreProps['storeFile']

        def bundlePath = "$buildDir/outputs/bundle/debug/android-debug.aab"
        def jarsignerPath = "${System.env.JAVA_HOME ?: ""}/bin/jarsigner"

        if (!file(bundlePath).exists()) {
            throw new GradleException("Bundle file not found: ${bundlePath}")
        }

        commandLine jarsignerPath,
                "-verbose",
                "-sigalg", "SHA256withRSA",
                "-digestalg", "SHA-256",
                "-keystore", storeFile,
                "-storepass", storePassword,
                "-keypass", keyPassword,
                bundlePath,
                keyAlias
    }
}



tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        path = sdkDir ?: "$System.env.ANDROID_HOME"
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.lastdefenders.game/com.lastdefenders.game.AndroidLauncher'
}
